---
description:
globs:
alwaysApply: true
---
保持中文
系统为Windows server 2022 ，ps运行命令使用;而不是&&
当用户提出要求或者提供了相关链接知识和方法一定要记录到项目中的\.cursor\rules\project_rule.mdc文件中，
如果用户没有提供相关链接知识和方法，但是你知道的话，也一定要记录到项目中的\.cursor\rules\project_rule.mdc文件中
系统盘C盘存储有限，尽量使用E盘下载和存储文件。

# MCiSEE Vue项目架构优化规则

## 架构优化要点

### 1. 组件架构优化
- 使用Composition API和`<script setup>`语法
- 组件按功能模块化，提高复用性
- 使用Pinia进行状态管理，替代Vuex
- 实现响应式数据流和组件通信

### 2. 样式架构优化
- 使用CSS变量实现主题系统
- 实现暗色/亮色模式切换
- 使用CSS Grid和Flexbox实现响应式布局
- 优化移动端适配和触摸体验

### 3. 性能优化
- 使用Vite作为构建工具，支持ES模块和HMR
- 实现组件懒加载和路由懒加载
- 优化图片和资源加载
- 使用TypeScript提供类型安全

### 4. 国际化支持
- 使用vue-i18n实现多语言支持
- 支持中文、英文等多种语言
- 动态语言切换功能

### 5. 主题系统
- 支持跟随系统、亮色、暗色三种主题模式
- 使用CSS变量实现主题切换
- 背景图片动态切换

## CSS样式优化规则

### 1. 设计系统
- 使用一致的间距、颜色、字体系统
- 实现组件级别的样式封装
- 支持深色和浅色主题

### 2. 响应式设计
- 移动优先的设计理念
- 使用CSS Grid和Flexbox布局
- 支持触摸手势和移动端优化

### 3. 性能优化
- 使用CSS变量减少重复代码
- 优化动画和过渡效果
- 减少重绘和回流

### 4. 可访问性
- 支持键盘导航
- 提供焦点指示器
- 确保颜色对比度符合标准

## 技术栈

- Vue 3.5+ (Composition API)
- TypeScript 5.8+
- Vite 7.0+ (构建工具)
- Pinia 3.0+ (状态管理)
- Vue Router 4.5+ (路由)
- Vue I18n 9.14+ (国际化)
- CSS Variables (主题系统)
- CSS Grid/Flexbox (布局)

## 项目结构

```
src/
├── components/     # 可复用组件
├── views/         # 页面组件
├── stores/        # Pinia状态管理
├── services/      # API服务层
├── composables/   # 组合式函数
├── router/        # 路由配置
├── assets/        # 静态资源
└── types/         # TypeScript类型定义
```

## 开发规范

1. 使用TypeScript进行类型检查
2. 组件使用PascalCase命名
3. 文件使用kebab-case命名
4. 使用ESLint进行代码规范检查
5. 组件样式使用scoped属性
6. 优先使用CSS变量而非硬编码值